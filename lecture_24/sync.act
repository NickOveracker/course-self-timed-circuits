import "globals.act";

export template <pint reset, sz>
defproc exclhi_ideal(globals g; bool a, b, u, v)
{
	preal n1 = 1.0*sz;
	preal n2 = 2.0*sz;
	preal n3 = 3.0*sz;
	preal p1 = 1.0*PN*sz;
	preal p2 = 2.0*PN*sz;
	preal p3 = 3.0*PN*sz;
	preal p4 = 4.0*PN*sz;

	bool _u, _v;
	spec
	{
		mk_excllo(_u, _v)
	}

	[ reset = RESET_X ->
		prs <g.Vdd, g.GND>
		{
			[keeper=0] a<n2> & _v -> _u-
			[keeper=0] ~a<p3> | ~_v<p3> -> _u+
			[keeper=0] b<n2> & _u -> _v-
			[keeper=0] ~b<p3> | ~_u<p3> -> _v+
		}

		prs <_v, g.GND>
		{
			[keeper=0] ~_u<p3> & ~v -> u+
			[keeper=0] _u<n1> | v<n1> -> u-
		}

		prs <_u, g.GND>
		{
			[keeper=0] ~_v<p3> & ~u -> v+
			[keeper=0] _v<n1> | u<n1> -> v-
		}
	[] reset = RESET_N ->
		prs <g.Vdd, g.GND>
		{
			[keeper=0] g._sReset<n3> & a & _v -> _u-
			[keeper=0] ~g._sReset<PM> | ~a<p3> | ~_v<p3> -> _u+
			[keeper=0] g._sReset<n3> & b & _u -> _v-
			[keeper=0] ~g._sReset<PM> | ~b<p3> | ~_u<p3> -> _v+
		}

		prs <_v, g.GND>
		{
			[keeper=0] ~_u<p3> & ~v -> u+
			[keeper=0] _u<n1> | v<n1> -> u-
		}

		prs <_u, g.GND>
		{
			[keeper=0] ~_v<p3> & ~u -> v+
			[keeper=0] _v<n1> | u<n1> -> v-
		}
	[] reset = RESET_0 ->
		prs <g.Vdd, g.GND>
		{
			[keeper=0] g.sReset<NM> | a<n2> & _v -> _u-
			[keeper=0] ~g.sReset<p4> & (~a | ~_v) -> _u+
			[keeper=0] g._sReset<n3> & b & _u -> _v-
			[keeper=0] ~g._sReset<PM> | ~b<p3> | ~_u<p3> -> _v+
		}

		prs <_v, g.GND>
		{
			[keeper=0] ~_u<p3> & ~v -> u+
			[keeper=0] _u<n1> | v<n1> -> u-
		}

		prs <_u, g.GND>
		{
			[keeper=0] ~_v<p4> & ~u -> v+
			[keeper=0] _v<n1> | u<n1> -> v-
		}
	[] reset = RESET_1 ->
		prs <g.Vdd, g.GND>
		{
			[keeper=0] g._sReset<n3> & a & _v -> _u-
			[keeper=0] ~g._sReset<PM> | ~a<p3> | ~_v<p3> -> _u+
			[keeper=0] g.sReset<NM> | b<n2> & _u -> _v-
			[keeper=0] ~g.sReset<p4> & (~b | ~_u) -> _v+
		}

		prs <_v, g.GND>
		{
			[keeper=0] ~_u<p4> & ~v -> u+
			[keeper=0] _u<n1> | v<n1> -> u-
		}

		prs <_u, g.GND>
		{
			[keeper=0] ~_v<p3> & ~u -> v+
			[keeper=0] _v<n1> | u<n1> -> v-
		}
	]
}

export template <pint N, sz>
defproc source_clk(globals g; bool clk, _clk)
{
	preal n1 = 1.0*sz;
	preal n2 = 2.0*sz;
	preal n3 = 2.0*sz;
	preal n10 = 9.0*sz;
	preal n20 = 18.0*sz;
	preal p1 = 1.0*PN*sz;
	preal p2 = 2.0*PN*sz;
	preal p3 = 3.0*PN*sz;
	preal p20 = 18.0*PN*sz;

	bool v[N];
	spec {
		mk_exclhi(v[0], v[1])
	}

	prs<g.Vdd, g.GND>
	{
		g._sReset<n20> & (v[0] | v[N-2]) -> v[1]-
		~g._sReset<NM> | ~v[0]<p20> & ~v[N-2] -> v[1]+
		v[1]<n10> | v[N-1]<n10> -> v[0]-
		~v[1]<p20> & ~v[N-1] -> v[0]+
	}

	(i:1..N-2:
		prs<g.Vdd, g.GND>
		{
			v[i]<n1> -> v[(i+1)%N]-
			~v[i]<p1> -> v[(i+1)%N]+
		}
	)
	clk = v[0];
	_clk = v[1];
}

export template <pint N, sz>
defproc source_stoppable_clk(globals g; bool clk, req, grant)
{
	// Implement a stoppable clock taking the above as an example
}

