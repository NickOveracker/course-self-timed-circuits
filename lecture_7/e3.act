import "globals.act";
import "channel.act";

export defproc copy(globals g; e1of<2> L, A, B)
{
	// TODO implement a 1-bit WCHB copy from L to A and B
	// remember to properly reset all c-elements
}

export defproc source(globals g; e1of<2> C)
{
	bool Ca;
	prs<g.Vdd, g.GND>
	{
		g._sReset & C.e -> Ca-
		~g._sReset | ~C.e -> Ca+

		Ca -> C.d[0]-
		~Ca -> C.d[0]+

		Ca -> C.d[1]-
		~Ca -> C.d[1]+
	}

	spec {
		mk_exclhi(C.d[0], C.d[1])
	}
}

export defproc sink(globals g; e1of<2> C)
{
	prs <g.Vdd, g.GND>
	{
		C.d[0] | C.d[1] -> C.e-
		~C.d[0] & ~C.d[1] -> C.e+
	}
}

globals g;
e1of<2> L, A, B;
source source_L(g, L);
sink sink_A(g, A);
sink sink_B(g, B);
copy dut(g, L, A, B);

